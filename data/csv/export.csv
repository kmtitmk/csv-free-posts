385,投稿,%e3%81%82%e3%81%82%e3%81%82,[outside_postform],1,,post
221,wordpress管理画面の外部から記事を投稿をする方法,test,"独自のフォームで記事投稿をすることができるプラグインを作成します。
<h2>wp_insert_post( $post, $wp_error ); を利用</h2>
wp_insert_postはデータベースの記事投稿関係のテーブルを直接修正できます。 <a href=""http://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/wp_insert_post"">関数リファレンス/wp insert post</a>

引数に以下の配列で設定することで投稿・編集可能。
<pre><code class=""php"">$my_post = array(
    'ID' =&gt; [ &lt;投稿 ID&gt; ] // 既存の投稿を更新する場合に指定。
    'post_content' =&gt; [ &lt;文字列&gt; ] // 投稿の全文。
    'post_name' =&gt; [ &lt;文字列&gt; ] // 投稿のスラッグ。
    'post_title' =&gt; [ &lt;文字列&gt; ] // 投稿のタイトル。
    'post_type' =&gt; [ 'post' | 'page' | 'link' | 'nav_menu_item' | カスタム投稿タイプ ] // 投稿タイプ。デフォルトは 'post'。
    'post_category' =&gt; [ array(&lt;カテゴリー ID&gt;, ...) ] // 投稿カテゴリー。デフォルトは空（カテゴリーなし）。
    'tags_input' =&gt; [ 'tag, tag, ...' | array ] // 投稿タグ。デフォルトは空（タグなし）。
);
wp_insert_post( $my_post, $wp_error ); </code></pre>
post_title、post_contentは必須の引数。
<h3>独自のフォームを作成してPOSTしてみる。</h3>
入力フォームの設定はこちら。

入力フィールドは設定する引数によって内容を変更します。
<pre><code class=""html"">&lt;form action=""[送信するURL]"" method=""POST""&gt;
    [入力フィールドの設定]
    &lt;button type=""submit""&gt;送信する&lt;/button&gt;
&lt;/form&gt;</code></pre>
<h3>nonceフィールドで認証の設定</h3>
データベースを更新するときは、nonceフィールドを設定しセキュリティ対策を行います。
<pre><code class=""html"">&lt;form action=""[送信するURL]"" method=""POST""&gt;
    &lt;?php wp_nonce_field('outside_postform', 'nonce_outside_postform'); ?&gt;
    [入力フィールドの設定]
    &lt;button type=""submit""&gt;送信する&lt;/button&gt;
&lt;/form&gt;</code></pre>
wordpressではwp_nonce_field()の関数を使うことでセキュリティ対策を行ってくるので簡単。

設定したnonceのチェックにはwp_verify_nonce()を利用。

$_POSTを直接wp_insert_postの引数に設定するのは良くない書き方のに見えますが、wp_insert_postには無害化の処理がされています。
<h3>wp_insert_post();実行後にリダイレクト</h3>
POSTする場所は同一ページを利用しているため、リロードをしてしまうと重複して投稿されてしまう。

重複投稿を避けるためリダイレクトさせます。リダイレクトさせるURLには投稿が完了ステータスを付与しjsでアラート表示させれば、わかりやすいでしょう。
<pre><code class=""php"">//インサートの実行
public function run_insert_post()
{
    $this-&gt;insert_post_tag();
    if (is_user_logged_in()) {
        $nonce = $_REQUEST['nonce_outside_postform'];
        if (wp_verify_nonce($nonce, 'outside_postform')) {
            $my_post = array(
                'post_status' =&gt; 'publish',
                'post_title' =&gt; $_POST['post_title'],
                'post_name' =&gt; $_POST['post_name'],
                'post_type' =&gt; $_POST['post_type'],
                'post_content' =&gt; $_POST['post_content'],
                'post_category' =&gt; $_POST['category'],
                'tags_input' =&gt; $this-&gt;insert_post_tag()
            );

            //IDがある場合投稿の編集
            if (isset($_POST['ID']) &amp;&amp; get_post($_POST['ID'])) {
                $my_post['ID'] = $_POST['ID'];
            }
            $insert_status = wp_insert_post($my_post);
            if ($insert_status) {
                $mesg = '投稿完了';
            } else {
                $mesg = '投稿失敗';
            }

        } else {
            $mesg = '不正な投稿';
        }

        global $post;
        $this-&gt;this_post = $post;
        $url = add_query_arg(array('outside_postform_func_status' =&gt; $mesg), get_the_permalink($this-&gt;this_post-&gt;ID));
        wp_redirect($url);
        exit;
    }
}</code></pre>
ステータスからアラートを実行させてから元のページに遷移して完了となります。
<pre><code class=""php"">//アラート後にページの遷移
public function run_alert()
{
    $link = get_the_permalink($this-&gt;this_post-&gt;ID);
    $insert_status = urldecode($this-&gt;get_data['outside_postform_func_status']);
    print &lt;&lt;&lt; EOT
    &lt;script&gt;
        alert(""{$insert_status}"");
        location.href = ""{$link}"";
    &lt;/script&gt;
EOT;
}</code></pre>
<h3>wp_insert_post()を使ったプラグインを制作</h3>
今までの内容を使ってプラグインを作ってみます。
<h4>プラグインにするための仕様をまとめてclass化</h4>
<ul>
 	<li>ショートコードで外部投稿フォームの作成。</li>
 	<li>現在のページにPOSTしてwp_insert_post()を実行。</li>
 	<li>投稿結果のステータスをアラート表示</li>
</ul>
プラグイン化する場合、実行タイミングよっては関数が動かない場合があります。actionフックの内容を確認して、適切なタイミングで実行させればエラーは起こりません。

ページのリロードでPOSTデータを連続投稿しないために、wp_insert_post()の後はリダイレクトをさせます。リダイレクトはget_headerのactionフックを利用することで。htmlより先にリダイレクトを実行できます。

投稿結果のステータスを表示させるアラートはjsを利用するため、wp_headのactionフックを利用します。そして、アラート表示後のパラメーターを最終的に取り除くためlocation.hrefでページを遷移させています。
<pre><code class=""php"">&lt;?php

/*
Plugin Name: Outeside Postform
Plugin URI:
Description: 外部フォームから投稿を可能にするプラグイン
Version: 1.0
Author: MATSUI KAZUKI
Author URI:
License:
*/

$outside_postform = new OutsidePostform();
class OutsidePostform
{
    private $plugin_path;
    private $post_data;
    private $get_data;
    private $this_post;


    public function __construct()
    {
        $this-&gt;plugin_path = WP_PLUGIN_URL.'/'.str_replace(basename(__FILE__), """", plugin_basename(__FILE__));
        add_shortcode('outside_postform', array($this, 'outside_postform_func'));
        add_action('wp_enqueue_scripts', array($this, 'theme_name_scripts'));

        //POSTデータの取得
        $args = array(
            'nonce_outside_postform' =&gt; FILTER_SANITIZE_ENCODED
        );
        $this-&gt;post_data = filter_input_array(INPUT_POST, $args);
        if ($this-&gt;post_data['nonce_outside_postform']) {
            add_action('get_header', array($this, 'run_insert_post'));
        }

        //GETデータ取得
        $args = array(
            'outside_postform_func_status' =&gt; FILTER_SANITIZE_ENCODED
        );
        $this-&gt;get_data = filter_input_array(INPUT_GET, $args);
        if ($this-&gt;get_data['outside_postform_func_status']) {
            add_action('wp_head', array($this, 'run_alert'));
        }
    }


    //ショートコード
    public function outside_postform_func()
    {
        $form = '';
        if (is_user_logged_in()) {
            $nonce = wp_nonce_field('outside_postform', 'nonce_outside_postform', true, false);
            $action_url = $_SERVER['REQUEST_URI'];

            //投稿タイプ
            $select_option = '';
            $args = array(
                'public' =&gt; true,
            );
            $post_types = get_post_types($args, 'names');
            unset($post_types['attachment']);
            foreach ($post_types as $v) {
                $select_option .= '&lt;option&gt;' . $v . '&lt;/option&gt;';
            }
            unset($v);

            //カテゴリー、タグ
            $cats_li = $this-&gt;get_post_category_terms('category');
            $tags_li = $this-&gt;get_post_category_terms('post_tag');

            //formタグ
            $form = &lt;&lt;&lt; EOT
            &lt;form id=""outside_postform_func"" action=""{$action_url}"" method=""POST""&gt;
                {$nonce}
                &lt;input type=""number"" name=""ID"" value="""" placeholder=""ID""&gt;&lt;span class=""sub""&gt;※修正の場合はIDを入力する&lt;/span&gt;
                &lt;input type=""text"" name=""post_title"" value="""" placeholder=""ここにタイトルを入力""&gt;
                &lt;input type=""text"" name=""post_name"" value="""" placeholder=""スラッグ""&gt;

                &lt;span class=""heading""&gt;投稿タイプ&lt;/span&gt;
                &lt;select name=""post_type""&gt;{$select_option}&lt;/select&gt;

                &lt;span class=""heading""&gt;カテゴリー&lt;/span&gt;
                {$cats_li}

                &lt;span class=""heading""&gt;タグ&lt;/span&gt;
                {$tags_li}

                &lt;textarea name=""post_content""&gt;&lt;/textarea&gt;
                &lt;button class=""button button-large button-primary"" type=""submit""&gt;送信する&lt;/button&gt;
            &lt;/form&gt;
EOT;
        }
        return $form;
    }


    //termsのリスト取得
    private function get_post_category_terms($taxonomies)
    {
        $checkbox_li = '&lt;ul class=""terms_li""&gt;';
        $args = array(
            'hide_empty' =&gt; false,
        );
        $cats = get_terms($taxonomies, $args);
        foreach ($cats as $v) {
            $checkbox_li .= &lt;&lt;&lt; EOT
                &lt;li&gt;
                    &lt;label&gt;&lt;input type=""checkbox"" name=""{$taxonomies}[]"" value=""{$v-&gt;term_id}""&gt;{$v-&gt;name}&lt;/label&gt;
                &lt;/li&gt;
EOT;
        }
        unset($v);
        $checkbox_li .= '&lt;/ul&gt;';
        return $checkbox_li;
    }


    //外部ファイル読み込み
    public function theme_name_scripts()
    {
        wp_enqueue_style('style-name', $this-&gt;plugin_path . '/assets/css/style.css');
    }


    //インサートの実行
    public function run_insert_post()
    {
        $this-&gt;insert_post_tag();
        if (is_user_logged_in()) {
            $nonce = $_REQUEST['nonce_outside_postform'];
            if (wp_verify_nonce($nonce, 'outside_postform')) {
                $my_post = array(
                    'post_status' =&gt; 'publish',
                    'post_title' =&gt; $_POST['post_title'],
                    'post_name' =&gt; $_POST['post_name'],
                    'post_type' =&gt; $_POST['post_type'],
                    'post_content' =&gt; $_POST['post_content'],
                    'post_category' =&gt; $_POST['category'],
                    'tags_input' =&gt; $this-&gt;insert_post_tag()
                );

                //IDがある場合投稿の編集
                if (isset($_POST['ID']) &amp;&amp; get_post($_POST['ID'])) {
                    $my_post['ID'] = $_POST['ID'];
                }
                $insert_status = wp_insert_post($my_post);
                if ($insert_status) {
                    $mesg = '投稿完了';
                } else {
                    $mesg = '投稿失敗';
                }

            } else {
                $mesg = '不正な投稿';
            }

            global $post;
            $this-&gt;this_post = $post;
            $url = add_query_arg(array('outside_postform_func_status' =&gt; $mesg), get_the_permalink($this-&gt;this_post-&gt;ID));
            wp_redirect($url);
            exit;
        }
    }


    //タグの配列を文字列に変更
    private function insert_post_tag() {
        $tag_array = array();
        if(is_array($_POST['post_tag'])){
            foreach($_POST['post_tag'] as $v) {
                $tag_data = get_tag($v);
                $tag_array[] = $tag_data-&gt;name;
            }
            unset($v);
        }
        return implode("","", $tag_array);
    }


    //アラート後にページの遷移
    public function run_alert()
    {
        $link = get_the_permalink($this-&gt;this_post-&gt;ID);
        $insert_status = urldecode($this-&gt;get_data['outside_postform_func_status']);
        print &lt;&lt;&lt; EOT
        &lt;script&gt;
            alert(""{$insert_status}"");
            location.href = ""{$link}"";
        &lt;/script&gt;
EOT;
    }
}</code></pre>
ショートコードを貼り付ければフォームが表示されます。

<input readonly=""readonly"" type=""text"" value=""[outside_postform]"" />
<h4>ショートコードの出力結果</h4>
[outside_postform]",1,,post
102,"git diffの便利な使い方",git-diff-usefull,"<div class=""wp_local""><link rel=""stylesheet"" href=""/wordpress/wp-content/themes/study/common/css/wp_local.css""><h3>目次</h3><ul class=""mokuji list1""><li><a href=""#outline"">概要</a></li><li><a href=""#basic"">基本的な使い方</a></li><li><a href=""#benri"">便利な使い方</a></li></ul><section><h3>概要</h3><p>今回は、Gitの差分を取る機能「git diff」の使い方の一部を紹介します。</p><p>Source Treeを使用している場合は、差分を動的に可視化してくれていてますが、Gitコマンドを使用することによって、痒いとこに手が届くこともあります。</p><p>最初に基本について、説明し、次に実用的な使い方を紹介します。</p></section><section id=""basic""><h3>基本的な使い方</h3><p>基本的にGitコマンドは、Gitで管理しているディレクトリの中で行います。Source Treeの「端末」をクリックすると、容易に飛んでくれ流ので活用しましょう。 </p><figure><a class=""js_popup_img""><img src=""/images/git_diff/img0.png"" alt=""""></a></figure><h4>１：インデックスとの差分を見る</h4><p>「git diff」の基本動作は「作業ツリーに行われた変更の表示」です。</p><pre class=""code"">// [インデックス] → [作業ツリー] の差分を見るgit diff</pre><figure><a class=""js_popup_img""><img src=""/images/git_diff/img1.png"" alt=""""></a></figure><figure><a class=""js_popup_img""><img src=""/images/git_diff/img2.png"" alt=""""></a></figure><h4>２：最新のコミットとの差分を見る</h4><p>「git diff」の基本動作は「作業ツリーに行われた変更の表示」です。</p><pre class=""code"">// [最新コミット] → [作業ツリー] の差分を見るgit diff HEAD</pre><h4>３：インデックスとHEADの差分を見る</h4><pre class=""code"">// [最新のコミット] → [インデックス] を比較するgit diff --cachedgit diff --cached HEAD // 同義</pre></section><section id=""benri""><h3>便利な使い方</h3><p>基本的な使い方で紹介したものは、黒い画面に慣れている方以外は、Source Treeで確認した方が、一度に取れる情報も多く、特殊な作業を前提としていない限りは、効率的と言えるかもしれません。<br>ここでは、Source Treeよりは、こっちの方が、やりやすい・わかりやすいのでは、といったコマンドを、一部紹介していきます。</p><h4>HEADと指定したコミットとの差分を比較し、ファイル名だけを出力する</h4><p>現在作業中の箇所から、指定したコミットのとことの差分をみて、変更があったファイル名だけを抽出できる。FTPにどのファイルをあげたいか知りたい時に使うと便利。</p><pre class=""code"">git diff --name-only HEAD..cd33db4</pre><h4>HEADと指定したコミットとの差分を比較し、変更があったファイルをZIPファイルにまとめて出力する</h4><p>現在作業中の箇所から、指定したコミットのとことの差分をみて、変更があったファイルをまとめて出力できる。階層などもそのままにまとめてくれるので、納品ファイルを作成する際に便利。</p><pre class=""code"">git archive --format=zip HEAD `git diff cd33db4 --name-only` -o archive.zip;</pre><p>※基本的には上記のコマンドでいいのですが、もし削除したファイルなどがあると、「'xxxxx' did not match any files ...」とエラーメッセージが出ることもあります。その場合は、「–diff-filter」という機能を使い、削除したファイルである「D」をarchiveの対象から外してあげると上手くいきます。</p><pre class=""code"">git archive --format=zip HEAD `git diff cd33db4 --name-only --diff-filter=AMCR` -o archive.zip;</pre><p>※–diff-filterのオプションは以下の通りです。<a href=""https://git-scm.com/docs/git-diff"" target=""_blank""></a></p><p>--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (i.e. regular file, symlink, submodule, …​) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters (including none) can be used. When * (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.</p><p>今回紹介するのはこの２点ですが、比較対象を[コミット]から、[ブランチ]に変えたり、文字レベルで違いを表示できるgit diff --word-diffなんてものがあったり、どれだけ進んだかだけ調べたい時には、git diff --statなど、他にも様々な使い方があります。「なんか、これを知りたいだけなのに、結構手間がかかってるな」なんて思ったら、「git コマンド　○○(やりたいこと)」「git diff　○○(やりたいこと)」などで検索してみましょう。</p><p>また、Source Treeのカスタムアクション機能というのを使えば、毎回同じGitコマンドを打たなくても、コマンドを格納しておくことができます。その一例を紹介して、今回は終了させていただきます。</p><h4>Source Treeのカスタムアクション機能の使い方の一例</h4><p>1:あらかじめ使いたいコマンドを「.sh」形式にして、任意のフォルダに格納しておく。</p><p>2:Source Treeの「操作」→「カスタムアクション」→「編集」と進む。</p><figure><a class=""js_popup_img""><img src=""/images/git_diff/img4.png"" alt=""""></a></figure><p>3:「追加」をクリックし、「メニューキャプション」には、登録するコマンドを任意で入力。「実行するスクリプト」の「…」をクリックして、先ほど作成した「○○.sh」を選択。必要があれば「パラメータ」を入力して、「OK」をクリックすると、次回から、「操作」→「カスタムアクション」と進むと、登録した「メニューキャプション」のアクション名が出てくるため、それをクリックすると、実行できるようになる。</p><figure><a class=""js_popup_img""><img src=""/images/git_diff/img5.png"" alt=""""></a></figure><p>参考サイト<br><a href=""http://www-creators.com/archives/755"" target=""_blank"">http://www-creators.com/archives/755</a><br><a href=""https://qiita.com/shibukk/items/8c9362a5bd399b9c56be"" target=""_blank"">https://qiita.com/shibukk/items/8c9362a5bd399b9c56be</a><a href=""https://qiita.com/koki-sato/items/d055417d93a3aea64f93"" target=""_blank"">https://qiita.com/koki-sato/items/d055417d93a3aea64f93</a></p></section><div class=""popupplate""></div><script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script><script>/*   POPUP-------------------------------------------------- */$('.js_popup_img').click(function(){var cloneImg = $(this).html();$('.popupplate img').remove()$('.popupplate').addClass('open').append(cloneImg);})$('.popupplate').on('click',function(){$(this).removeClass('open');});</script></div>",11,,post
99,wordpressをlocalで見よう,wp_local,"<div class=""wp_local""><link rel=""stylesheet"" href=""/wordpress/wp-content/themes/study/common/css/wp_local.css""><h3>目次</h3><ul class=""mokuji list1""><li><a href=""#outline"">概要</a></li><li><a href=""#importar"">エクスポート・インポート機能を使う方法</a></li><li><a href=""#manual"">手動でコピー（移行）する方法</a></li></ul><section><h3>概要</h3><p>今回は、先方サーバや、レンタルサーバで運用中のWordpressサイトをローカル環境(MAMP)にコピー（移行）する方法の一部を紹介します</p><p>方法は多岐に渡りますが、大きく分けて３つあります。</p><ul class=""outlinelist""><li><b>1. エクスポート・インポート機能を使う方法　：初心者向け・小規模サイト</b><p>WordPress標準のエクスポートとインポートを使う方法です。設定やテーマなどは関係なく、記事とアップロードしたファイルのみ移行したい場合はこれで十分。</p><hr><p><b>メリット</b><br>すごく簡単</p><p><b>デメリット</b><br>WordPressの設定、テーマのファイルと設定、プラグインのファイルと設定を移行できない。（後ほど手動で変換が必要）</p><hr></li><li><b>2. プラグインを使う方法　：初心者〜中級者向け・サイト規模問わず</b><p>WordPressプラグインを使う方法です。丸ごと引越し用のものがあったり、データベースを書き出してくれるものがあったり、設定ファイルをコピーしてくれるものがあったりと、様々。うまく使えれば一番簡単に引越しが可能となる。<br>しかし、すでに開発が終わっているものがあったり、環境によっては大量のエラーが出るものもあり、どれを使用するかは慎重な判断が必要。<br>また、先方サーバをいじれない場合は、ほとんどこの選択肢は取れない場合が多い。自身で管理しているサイトであれば、相性次第では、プラグイン導入がおすすめ。</p><p><b>有名プラグイン</b>：<a href=""https://ja.wordpress.org/plugins/all-in-one-wp-migration/"" target=""_blank"">All-in-One WP Migration</a>・<a href=""https://ja.wordpress.org/plugins/duplicator/"" target=""_blank"">duplicator</a>・<a href=""https://ja.wordpress.org/plugins/updraftplus/"" target=""_blank"">UpdraftPlus</a></p><hr><p><b>メリット</b><br>ものによってはすごく簡単。3分で引っ越し完了できるものも</p><p><b>デメリット</b><br>WordPressの設定、テーマのファイルと設定、プラグインのファイルと設定を移行できない。（後ほど手動で変換が必要）</p><hr></li><li><b>3. 手動でコピーする方法　：上級者向け・サイト規模問わず</b><p>WordPressの機能に頼らず、ファイルとデータベースを手動でコピー（移行）するため、設定なども丸ごと同じ状態で持って来れます。<br>その分難易度も上がり、手順を間違うと上手く表示がされなかったり、思考力が鈍っていると原因不明のエラーの嵐に巻き込まれることもある。<br>しかし、どれだけ高度なカスタマイズをしていても、どれだけWP内が散らかっていても、全く同じ状態でローカル環境に再現されルため、プラグインよりは安心感はある。<br>カスタマイズされ尽くされているサイトを扱う場合や、先方サーバに入れず、sqlファイルのみをもらえるような場合には、この手法を使うのが望ましい。</p><hr><p><b>メリット</b><br>どれだけ高度なカスタマイズをしていても、どれだけWP内が散らかっていても、全く同じ状態でローカル環境に再現される。</p><p><b>デメリット</b><br>手順を間違うとエラーに見舞われる。</p><hr></li></ul><p>この３つの手法のうち、今回は１と３のみ説明します。プラグインは各ページの方法の説明が詳しいため、ここでは割愛させていただきます。</p><p>参考サイト<br><a href=""https://hacknote.jp/archives/33578/"" target=""_blank"">https://hacknote.jp/archives/33578/</a><br><a href=""https://ebookbrain.net/plugins-for-safely-moving-wordpress/"" target=""_blank"">https://ebookbrain.net/plugins-for-safely-moving-wordpress/</a></p></section><section id=""importar""><h3>エクスポート・インポート機能を使う方法</h3><p><b>手順</b></p><ol class=""mokuji""><li>サーバ上（移行元）のwordpressの管理画面へ進み、<b>「ツール」</b>→<b>「エクスポート」</b>へ進み<b>「全てのコンテンツを」</b>選択して、<b>「エクスポートファイルをダウンロード」</b>を押下する。</li><li>FTPを使用し、ローカル環境に全てのファイルをコピーする。</li><li>PHP My Admin を使用して、ローカル用のデータベースを作成する。</li><li>wp-config・.htaccessを編集する。</li><li>wordpressのユーザーパスワードを設定する。</li><li><b>「ツール」</b>→<b>「インポーターの実行」</b>→<b>「ファイルを選択」</b>→先程ダウンロードしたxmlファイルを指定し、<b>「ファイルをアップロードしてインポート」</b>をクリックする。</li><li>※：最大サイズが足りない場合</li></ol><h4>１：サーバ上（移行元）のwordpressの管理画面へ進み、<b>「ツール」</b>→<b>「エクスポート」</b>へ進み<b>「全てのコンテンツを」</b>選択して、<b>「エクスポートファイルをダウンロード」</b>を押下する。</h4><p></p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-1.png"" alt=""""></a></figure><h4>２：FTPを使用し、ローカル環境に全てのファイルをコピーする。</h4><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-2.png"" alt=""""></a></figure><h4>３：PHP My Admin を使用して、ローカル用のデータベースを作成する。</h4><p>▼mampを開き、<b>「Open WebStart Page」</b>をクリック</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-3.png"" alt=""""></a></figure><p>▼<b>「Tool」</b>をクリックし、<b>「PHPMYADMIN」</b>をクリック</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-4.png"" alt=""""></a></figure><p>▼１：<b>「NEW」</b>をクリック、２：に任意のデータベース名を入れる。３：<b>「Create」</b>をクリックする。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-5.png"" alt=""""></a></figure><h4>４：wp-config・.htaccessを編集する。</h4><p>wp-config・.htaccessは、共にwordpressの直下にあります。</p><p>▼wp-config書き換え場所。DB_NAMEは、先ほど「PHP My Admin」で作成したもの。DB_USER・DB_PASSWORDは、MAMPの初期設定の場合「root」「root」。</p><pre class=""code"">define( ‘DB_NAME’, ‘local→DB名’ );define( ‘DB_USER’, ‘root→DBのユーザー名’ );define( ‘DB_PASSWORD’, ‘ root→DBパスワード’ );define( ‘DB_HOST’, ‘ local host→mDBのホスト名’ );</pre><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-6.png"" alt=""""></a></figure><p>▼.htaccessに記入するもの（RewriteBaseのディレクトリをwordpressを置いたとこに書換）</p><pre class=""code""># BEGIN WordPress<IfModule mod_rewrite.c>RewriteEngine OnRewriteBase /wordpress/RewriteRule ^index.php$ - [L]RewriteCond %{REQUEST_FILENAME} !-fRewriteCond %{REQUEST_FILENAME} !-dRewriteRule . /wordpress/index.php [L]</IfModule># END WordPress</pre><h4>wordpressのユーザーパスワードを設定する。</h4><p>▼必要情報を入力し、<b>「検索エンジンがサイトをインデックスしないようにする」</b>にチェックを入れて、<b>「wordpressをインストール」</b>をクリックする。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-7.png"" alt=""""></a></figure><p>「成功しました !」の画面が出たら、<b>「ログイン」</b>をクリックする。</p><p>必要情報入力の際に設定した、ユーザー名・パスワードを入力して、<b>「ログイン」</b>をクリックする。</p><h4>５：<b>「ツール」</b>→<b>「インポーターの実行」</b>→<b>「ファイルを選択」</b>→先程ダウンロードしたxmlファイルを指定し、<b>「ファイルをアップロードしてインポート」</b>をクリックする。</h4><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-8.png"" alt=""""></a></figure><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-10.png"" alt=""""></a></figure><h4 class=""text_indent"">※アップロードするxmlファイルのサイズが、最大サイズを超えている場合の対処法。（<b>「自分のコンピューターからファイルを選択する: (最大サイズ: 32 MB)」</b>の箇所、または、PHPMYADMINのインポートの箇所）</h4><p>まずはMAMPから利用しているPHPのバージョンを確認します。（今回は7.1.19）</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-11.png"" alt=""""></a></figure><p>次にFinderから<b>「/Applications/MAMP/bin/php/php7.1.19/conf/」</b>へと進み、<b>「php.ini」</b>を開きます。 </p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-12.png"" alt=""""></a></figure><p>▼下記２つの値を必要なとこまで上げて保存します。<br>post_max_size<br>upload_max_filesize<br>memory_limit<br></p><p><b>「.htaccess」</b>に書く場合は、以下の通り。</p><pre class=""code"">#メモリ使用量の制限php_value memory_limit 20M #POSTデータに許可される最大サイズphp_value post_max_size 20M #1つのファイルアップロードに許可される最大サイズphp_value upload_max_filesize 20M</pre><p class=""text_indent"">※なおこの値は<b>「post_max_size ＜ upload_max_filesize ＜ memory_limit」</b>とする必要があります。</p></section><section id=""manual""><h3>手動でコピー（移行）する方法</h3><p><b>手順</b></p><ol class=""mokuji""><li>サーバ上（移行元）のデータベースをエクスポートする。</li><li>FTPを使用し、ローカル環境に全てのファイルをコピーする。</li><li>PHP My Admin を使用して、ローカル用のデータベースを作成し、移行元のデータベースをインポートする。</li><li>wp-config・.htaccessを編集する。</li><li>データベースのドメインを変更する。</li><li>wordpressのユーザーパスワードを入力してアクセスする。</li></ol><h4>１：サーバ上（移行元）のデータベースを取得する。</h4><p>取得方法は、代表的なものでは下記のようになるかと思われます。</p><ul class=""list1""><li>先方から、直接データベースを頂く。</li><li>もし移行元でプラグインが入れられるなら、データベースバックアップ・エクスポートできるプラグイン。</li><li>phpmyadminやレンタルサーバのエクスポートできる場合はそちらから取得。</li><li>sshで接続できる場合は、sqlコマンドで取得。</li></ul><p>今回は、sshで接続できる場合の取得方法を紹介します。</p><p>１：ssh接続する<br>２：mysqlに入り、データベース名を確認する。<br>３：mysqldumpコマンドを使用してデータベースを書き出す。</p><p>▼コマンド例：</p><pre class=""code"">mysqldump -u [ユーザー名] -p [移行元データベース名] > [移行後データベース名];</pre><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun2-1.png"" alt=""""></a></figure><p>▼sqlファイルが書き出されていることを確認する</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun2-2.png"" alt=""""></a></figure><h4>２：FTPを使用し、ローカル環境に全てのファイルをコピーする。</h4><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-2.png"" alt=""""></a></figure><h4>３：PHP My Admin を使用して、ローカル用のデータベースを作成し、移行元のデータベースをインポートする。</h4><p>▼mampを開き、<b>「Open WebStart Page」</b>をクリック</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-3.png"" alt=""""></a></figure><p>▼<b>「Tool」</b>をクリックし、<b>「PHPMYADMIN」</b>をクリック</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-4.png"" alt=""""></a></figure><p>▼１：<b>「NEW」</b>をクリック、２：に任意のデータベース名を入れる。３：<b>「Create」</b>をクリックする。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-5.png"" alt=""""></a></figure><p>▼１：<b>「作成したデータベース」</b>をクリック、２：<b>「Import」</b>をクリック。３：<b>「ファイルを選択」</b>をクリックする。４：<b>「Character set」</b>等設定し<b>「go」</b>をクリック。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun2-3.png"" alt=""""></a></figure><p class=""text_indent"">※アップロードサイズ((Max: 32MiB)の箇所)が足りない場合はエラーとなるため、前述した<br>｢アップロードするxmlファイルのサイズが、最大サイズを超えている場合の対処法」</b><br>を参照しphp.iniおよび.htaccessを編集する。</p><h4>４：wp-config・.htaccessを編集する。</h4><p>wp-config・.htaccessは、共にwordpressの直下にあります。</p><p>▼wp-config書き換え場所。DB_NAMEは、先ほど「PHP My Admin」で作成したもの。DB_USER・DB_PASSWORDは、MAMPの初期設定の場合「root」「root」。</p><pre class=""code"">define( ‘DB_NAME’, ‘local→DB名’ );define( ‘DB_USER’, ‘root→DBのユーザー名’ );define( ‘DB_PASSWORD’, ‘ root→DBパスワード’ );define( ‘DB_HOST’, ‘ local host→mDBのホスト名’ );</pre><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun1-6.png"" alt=""""></a></figure><p>▼.htaccessに記入するもの（RewriteBaseのディレクトリをwordpressを置いたとこに書換）</p><pre class=""code""># BEGIN WordPress<IfModule mod_rewrite.c>RewriteEngine OnRewriteBase /wordpress/RewriteRule ^index.php$ - [L]RewriteCond %{REQUEST_FILENAME} !-fRewriteCond %{REQUEST_FILENAME} !-dRewriteRule . /wordpress/index.php [L]</IfModule># END WordPress</pre><h4>５：データベースのドメインを変更する。</h4><p>URLのドメインを移行元から、移行先のものへと置換します。SQL内を直接置換してもいいのですが、それだと<b>「DB内にシリアライズされた情報がデータがあって、整合性が合わなくなる・・・」</b>だのなんだのと、色々と問題が発生する模様。<br>ただ単に動かせればいいやって場合は、直接SQL文を打ち込んで、一括置換でもいいですが、<br>今回は、置換用のツール<b>「Search Replace DB」</b>を使用する方法を紹介します。<br></p><p>１：<a href=""https://interconnectit.com/products/search-and-replace-for-wordpress-databases/"" target=""_blank"">ダウンロードサイト</a>にアクセスする</p><p><a href=""https://interconnectit.com/products/search-and-replace-for-wordpress-databases/"" target=""_blank"">Database Search and Replace Script in PHP</a></p><p>▼必要事項を入力し、<b>「SUBMIT」</b>をクリックする。￥と、メールが届くので、そこからダウンロードリンクをクリックする。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun2-4.png"" alt=""""></a></figure><p>ダウンロードしたzipを展開するとSearch-Replace-DB-masterというフォルダが現れます。このディレクトリをwp-config.phpと同階層のディレクトリに配置します。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun2-5.png"" alt=""""></a></figure><p>設置後、ブラウザで/Search-Replace-DB-master/にアクセスする。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun2-6.png"" alt=""""></a></figure><p>データベースが正常にインポートできて入れば、<b>「database」</b>の列に、設定したデータベースの情報が自動入力されています。<br><b>｢search/replace」</b>の列の、<b>「replace」</b>の欄に、<b>「移行元のURL」</b>を、<b>「with」</b>の欄に<b>「移行先（今回はローカル環境）のURL」</b>を入力します。<br><span class=""text_indent"">※うまくいかない場合は、「http://」を除去して置換してみる。</span><br><b>｢dry run」</b>をクリックすると、シミュレーション結果を見ることができます。<br>変更があったテーブルには<b>「view changes」</b>というリンクが表示されてます。このリンクをクリックすることにより、どのような置換が行われたのかを、確認することができます。<br>｢dry run」</b>で置換内容を確認し、問題なければ<b>「live run」</b>ボタンをクリックで置換を実行します。</p><figure><a class=""js_popup_img""><img src=""/images/wp_local/tejun2-7.png"" alt=""""></a></figure><a href=""https://wheelchair-coder.com/281/"" target=""_blank"">参考サイト：https://wheelchair-coder.com/281/</a><h4>wordpressのユーザーパスワードを入力してアクセスする。</h4><p>もしうまく表示されない場合は、cookieを削除、または、ブラウザを再起動して、再度アクセスして見る。</p><p>※PHPのバージョンがあっていないと、プラグインのエラーなどで正しく表示されないこともあります。（5系→7系で禁止された書き方も多数あり）<br>その場合は、MAMPのPHPのバージョンを変更します。</p><h4>MAMPのPHPのバージョンを変更方法</h4><p>１：/Applications/MAMP/bin/php/ へと進みます。</p><p>２：使用したいPHPを二つ残し、あとは全てリネームします。<br>(※php_xxx → nouse_php_xxx 等)</p><p>３：MAMPを再起動し、「MAMP」→「preferences」→「PHP」と進むと、残した２つのPHPだけが出てきくるので、使用したい方を選択します。</p></section><div class=""popupplate""></div><script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script><script>/*   POPUP-------------------------------------------------- */$('.js_popup_img').click(function(){var cloneImg = $(this).html();$('.popupplate img').remove()$('.popupplate').addClass('open').append(cloneImg);})$('.popupplate').on('click',function(){$(this).removeClass('open');});</script></div>",10,,post
60,HowtoVue.js,howtovue-js,"Qittaにも投稿 https://qiita.com/tsukinoki/items/c9746178243db0a08d10<h3>目次</h3><ol><li>Vue.jsとは</li><li>jQueryと比べる</li><li>作ってみた</li><li>所感</li></ol><h3>■ 0. はじめに</h3>記事・情報はたくさん落ちていますが、なにぶん初学者なので、自分には難しい説明が多い。今回はさわりだけ説明します。何となくのイメージで説明する部分もありますが、ご容赦を。。。少し調べるとたくさん記事が出てきます〜！<h3>■ 1.Vue.jsとは</h3><ul><li>Vue.js とは？</li></ul>以下、公式より (https://jp.vuejs.org/v2/guide/)<blockquote>  Vue (発音は / v j u ː / 、 view と同様）はユーザーインターフェイスを構築するためのプログレッシブフレームワークです。他の一枚板(モノリシック: monolithic)なフレームワークとは異なり、<strong>Vue は少しずつ適用していけるように設計されています。</strong>中核となるライブラリは view 層だけに焦点を当てています。そのため、<strong>使い始めるのも、他のライブラリや既存のプロジェクトに統合するのも、とても簡単です。</strong>また、モダンなツールやサポートライブラリと併用することで、洗練されたシングルページアプリケーションの開発も可能です。</blockquote>分類としてはjavaScriptのフレームワークの一種です。&lt;br&gt;・ Vue.js&lt;br&gt;・ React.js&lt;br&gt;・ Angular.js&lt;br&gt;これらが三大フレームワークと言われているものです。&lt;br&gt;<blockquote>  【脱線】ライブラリとフレームワークの違いについて  &gt; フレームワーク:  &gt; フレームワークは特定のプログラミング言語で書かれた、そのまま利用できるソフトウェアの主要部分の雛形（テンプレート）と、汎用的で再利用可能なクラスやライブラリ、モジュール、APIなどで構成され、また、開発者がコードを記述して機能を追加、拡張するための方法や規約などが定められている。  &gt;  &gt; ライブラリ:  &gt; ライブラリ（英: Library）は、汎用性の高い複数のプログラムを再利用可能な形でひとまとまりにしたものである。 ライブラリと呼ぶ時は、それ単体ではプログラムとして作動させることはできない実行ファイルではない場合がある。 ライブラリは他のプログラムに何らかの機能を提供するコードの集まりと言うことができる。  &gt;  &gt; jQueryなんかは代表的なライブラリの一種。  &gt; フレームワークは全体の骨組み、ライブラリはコードの集まり、みたいなイメージ。  &gt; 前者は全部入りの設計図、初めから骨組みが決まってる。(wordpressなんかは分かりやすいphpフレームワークの一種。index.phpがあって、mySQLがあって、、、骨組みが用意されている。)  &gt; 後者は部品箱。便利な機能をまとめたもの。ある機能に特化した関数の集合。目的は、機能・知識の再利用。（例えば、jQueryの 【$("".hoge2A"").click(function(){】みたいなの。普通はたくさんコード書かないといけないのに、これだけ書けばライブラリ側の部品を呼び出してクリックしたイベントを呼び出せるようになっている。）  &gt; <strong>※時代の移り変わりで言葉の意味も変わっている&amp;人によって認識が違うので注意！</strong></blockquote><h4>三大フレームワークについて</h4><ul><li>Angular.js</li><li>google開発のフレームワーク</li><li>規模が大きい。開発メンバ多し、開発ルールを定めてしっかりやる大規模本格開発向き。</li><li>フルスタックなのでライブラリを調べたり追加しなくても最初から機能全部入り、大抵のことは実現できる。部分的でなく全面的な導入が基本</li><li>アプリケーション開発によく用いられる (SI開発寄り)</li><li>バージョンアップが2年に一回の頻度であり、そのたびに記法が変わったりする。(AngularJS(無印)とAngular2以降はほぼ別物なので注意。現在はAngular6)</li><li>上述の理由から3年前の資料が使えなくなるので自分で調べられる技術者向け。個人でやる人も少ないから情報も少ない。</li><li>React.js</li><li>Facebookが中心となって開発しているライブラリ(フレームワーク寄り)</li><li>Angularより導入コストが低く、スモールスタートが可能。</li><li>Vue.jsよりは大規模、複雑なアプリに向いている。</li><li>これも割とかっちりしている。ちょっと学習コスト高め。（Javaとかかっちりした言語やってる人はこっちの方が好きな傾向あり。）</li></ul>・ Vue.js* 開発者はフリーのエンジニア発案。コミュニティベースで開発がされているフレームワーク(どちらかといえばライブラリ)* エンジニア主体であることから、日本語ドキュメントも充実しており、情報多め。* 一般的に、学習コストが少ないので、すぐ使い始めることができる。* アンチReact。制限が多く固っ苦しいReactでやりにくいことを簡単にできる。* とにかく自由。小規模導入から大規模導入までできる。でも基本は小規模なシステムに使われがち。以上説明終わり。適材適所なのでどれが悪いとかいうわけではないですが、ことweb制作会社という括りでいうと、jsは部分的に使う程度ですので、今回はVue.jsをクローズアップしました。<h3>■ 2.jQueryと比較してみる</h3><h4>みなさんおなじみのjQuery</h4><ul><li>jQuery は、DOM(※)セレクタ操作に特化したライブラリで HTML の一部をちょっとだけ弄るには手軽に扱える。(※「Document Object Model」の略。HTMLやXMLを扱うための仕組み、WEBページとJavaScriptなどのプログラミング言語とを繋ぐ)</li><li>更新のたびにセレクタから要素を探して操作をするため、複数のUIを連携させるようなページでは、<strong>同じデータを表示するはずの複数の要素がちゃんと同期していなかった</strong>り、<strong>全体の管理が大変</strong>になってくる。</li><li>シンプルなページにとっては低コストで導入できる＆理解者の多い便利なライブラリなので「そんな複雑な事はしていない」と現状つらい状況でなければ無理に変える必要はない。</li></ul><h4>Vue.jsでできること</h4><ul><li>こちらの記事が一番わかりやすかったので、こちらを参照基礎から学ぶ Vue.js,通称""猫本""を書いてる人の記事<blockquote>  https://qiita.com/mio3io/items/e7b2596d06b8005e8e6f</blockquote></li><li>公式　アニメーションコンポーネント<blockquote>  https://jp.vuejs.org/v2/guide/transitions.html</blockquote></li><li>自作のアニメーション遷移を割と簡単に作れる<blockquote>  http://chibinowa.net/note/vuejs/vue-22.html</blockquote></li></ul><h4>Vueの環境構築</h4><ul><li>大規模アプリケーションを構築するときには、NPMを利用したインストールを推奨しているが、アニメーションを追加する程度の利用であれば、jQueryと同じようにCDN（インターネット上のファイルをインポートする仕組み）でも利用可能です↓</li><li>jQuery : <code>&amp;lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js""&amp;gt;&amp;lt;/script&amp;gt;</code></li><li>Vue.js : <code>&amp;lt;script src=""https://unpkg.com/vue""&amp;gt;&amp;lt;/script&amp;gt;</code></li></ul><h4>Vue.jsが流行ってる理由</h4><ul><li>上章のように、jqueryと同様で導入がとても簡単</li><li>ある特定のページだけVue.jsにしてみたり、jqueryと共存することも可能</li><li>学習コスト少ない</li><li>ReactとかAngularと違って小規模なアプリケーション/webアプリケーションで気軽に導入できる。</li><li>小規模な導入から始められて、機能追加していっても発展性がある。jQueryとかだと後々しんどくなってくる。</li><li>新しいのに、公式ドキュメントがとてもわかりやすい &amp; Qittaとか記事がたくさんある。</li></ul>→ このちょうどいいバランスな気がする。<h3>■ 3.やってみる</h3><ul><li>ファイル階層の一例<blockquote>  https://codesandbox.io/s/o29j95wx9</blockquote></li><li>基礎編<blockquote>  https://jsfiddle.net/otktry/x3nj8ckL/9/</blockquote></li><li>発展<blockquote>  https://jsfiddle.net/otktry/m5gudx0o/</blockquote></li><li>アニメーション<blockquote>  https://jsfiddle.net/otktry/ptansdko/29/</blockquote></li></ul><h3>■ 4.所感</h3><h4>私自身が学習してjqueryと比較した時の所感</h4><ul><li>コンポーネントがまとまっているのでとても可読性は良い。</li><li><strong>HTML側のDOM操作とvue側の処理が分かれているのでHTMLの整合性とか気にしなくていい。</strong>(※jQueryでは、表示されているデータの整合性や、HTML構造自体の整合性を、自分で管理する必要がある。例えば、<code>&amp;lt;ul&amp;gt;</code>の中には<code>&amp;lt;li&amp;gt;</code>しか記述できないが、それをJavaScriptコードを記述する時点でかなり意識する必要がある。)</li><li>イベントコンポーネントは基本的にまとまっているので、複数のイベントの発火の順番とか気にしなくていい。</li></ul><h4>使い所</h4><ul><li>割とどこでも使える。</li><li>でも、単発のアニメーションとかはjQueryで十分(google先生からコピペしてすぐ使える・動くのはやっぱりjQuery)</li><li>Vueも他のフレームワークよりは日本語の情報多いけどjQueryには負ける。</li><li>すでにjQueryたっぷりで書かれているコードには導入できない。</p></li><li><p>複数の機能が重なってくる機能を新規で作成するとき、例えば入力フォーム (inputを取得/バリデーションチェックして、表示する/ボタン押下で送信/削除ボタンで消去) なんかはjQueryでやるとちょっと大変。また、一度完成した後にまた機能追加して複雑になっていくことが予想されるなら、Vueで作っちゃったほうがいいかも。</p></li><li><p>すでに落ちてる出来合いのアニメーションではなく、少し凝ったアニメーションをオリジナルで作成したい時なんかは導入してみたい。</p></li></ul><p>以上です、ありがとうございました。",9,,post
32,"SVG スニペット",svg-snippet,"<section><h3>斜め線</h3><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg1""><path d=""M0,0 L1200,0 0,200 Z"" fill=""#5ba4cf"" /></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg2""><path d=""M0,0 L1200,0 1200,200 Z"" fill=""#5ba4cf"" /></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg3""><path d=""M0,0 L1200,200 0,200 Z"" fill=""#5ba4cf"" /></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg4""><path d=""M1200,0 L1200,200 0,200 Z"" fill=""#5ba4cf"" /></svg></section><section><h3>円形</h3><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg5""><path d=""M0,0 Q600,400 1200,0 Z"" fill=""#ef7eb8"" /></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" viewBox=""0 0 1200 200"" class=""svg8""><path d=""M0,0 Q600,400 1200,0 L1200,200 L0,200 Z"" fill=""#ef7eb8""></path></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg6""><path d=""M0,200 Q600,-200 1200,200 Z"" fill=""#ef7eb8""/></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg6""><path d=""M0,0 L0,200 Q600,-200 1200,200 L1200,0 Z"" fill=""#ef7eb8""/></svg></section><section><h3>波線</h3><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" viewBox=""0 0 1200 200"" class=""svg7""><path d=""M0,0 v180 q120,40 240,0 t240,0 t240,0 t240,0 t240,0 v-180 Z"" fill=""#3eba90""></path></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" viewBox=""0 0 1200 200"" class=""svg8""><path d=""M0,200 v-180 q120,40 240,0 t240,0 t240,0 t240,0 t240,0 v180 Z"" fill=""#3eba90""></path></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" viewBox=""0 0 1200 200"" class=""svg9""><path d=""M0,0 L0,180 q30,40 60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 L1200,0 Z"" fill=""#3eba90""></path></svg><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" viewBox=""0 0 1200 200"" class=""svg10""><path d=""M0,200 L0,20 q30,40 60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 t60,0 L1200,200 Z"" fill=""#3eba90""></path></svg></section><section><h3>下三角</h3><svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" viewBox=""0 0 1200 200"" class=""svg11""><path d=""M0,0 L1200,0 600,200 Z"" fill=""#FF8C00"" /></svg></section>",8,,post
20,Photoshopの書き出し方法,photoshop,"<style>.conspicuous{ color: #a85151; }.reference { font-size: 14px; color: #9e9e9e; } h4 { font-size: 20px;}h5{ margin: 1.5em 0 0 1em; font-size: 18px; font-weight: bold; }.detail{ margin-left: 1em; }.number li{ margin-left: 1.25em; text-indent: -1.25em; }</style><div class=""wp_local""><link rel=""stylesheet"" href=""/wordpress/wp-content/themes/study/common/css/wp_local.css""><h3>目次</h3><ul class=""mokuji list1""><li><a href=""#outline"">概要</a></li><li><a href=""#basic"">基本的な書き出し方法</a></li><li><a href=""#asset"">アセットでの書き出し方法</a></li><li><a href=""#material"">画像を一気に変更する方法(一枚の画像で複数のサイズ表記している場合)</a></li><li><a href=""#uniformity"">たくさんの画像を一気に横（縦）幅統一する方法</a></li><li><a href=""#trivia"">豆知識</a></li></ul><section id=""outline""><h3>概要</h3><p>当社は比較的にPhotoshopでデザインされたものをコーディングする事があります。<br>ですので、今回は主にPhotoshopでの書き出し方法を紹介します。</p><p>又、WindowsでPhotoshopの作業している方がいないので、使用するパソコンはmacだと想定して紹介をします。<br>ですので、ショートカットキーやダウンロード方法などはmac基準です。<br>Windowsで知りたい方は、参考ページでご確認してください。</p><p>条件によってはphotoshopを使用せず、違うソフトで使用した方が良いものがありますので、そちらも紹介します。</p></section><section id=""basic""><h3>基本的な書き出し方法</h3><p>レイヤーを右クリックして書き出し<br><p><strong>psd内の全ての画像を書き出す</strong><br>ファイル＞書き出し＞WEB用に保存(shift ＋ option ＋ command + S)</p><p><strong>書き出し形式で選択された画像を書き出す</strong><br>ファイル＞書き出し＞書き出し形式(shift ＋ option ＋ command + W)</p></section><section id=""asset""><h3>アセットでの書き出し方法（カスタマイズ）</h3><h4>1：書き出せる種類</h4><p>jpg png gif svgで書き出せます。(pdfはアセットで書き出せない)</p><h5>svg書き出しを行う際の注意点</h5><p class=""detail"">カラーオーバーレイで色を塗ると、書き出した際に色がなくなっている可能性があります。<br>コーダにうまく表示できない事があります。解決法でPhotoshopで当該のレイヤーを選択した後、<strong class=""conspicuous"">書式＞シェイプに変換</strong> を行うと表示できることもあります。</p><p class=""detail"">以上のことから、Photoshopでのsvg書き出しはオススメできません。なるべくIllustratorで書き出すことを推奨します。</p><h5>pdfを書き出す方法</h5><p class=""detail"">pdfはアセットでは書き出せませんが、以下の流れでしたら書き出す事は可能です。<br><strong class=""conspicuous"">ファイル＞書き出し＞アートボードからPDF＞</strong><br>※アートボードで囲っていないと書き出しできません。</p><p class=""reference"">参考：<a href=""https://qiita.com/hibikikudo/items/d5c1a87768f5de2d71bf"" target=""_blank"">https://qiita.com/hibikikudo/items/d5c1a87768f5de2d71bf</a></p><h4>2：サイズ調節</h4><p>大きさ指定（ピクセル）：例）幅250px、高さ150pxで書き出す場合<br><strong class=""conspicuous"">250×150 test.png</strong></p><p>大きさ指定（%）：例）200％の大きさで書き出す場合<br><strong class=""conspicuous"">200% test.png</strong></p><p class=""reference"">参考：<a href=""https://blogs.adobe.com/japan/dtp-photoshop-kihon-tips-04/"" target=""_blank"">https://blogs.adobe.com/japan/dtp-photoshop-kihon-tips-04/</a></p><h4>３：解像度(画質)</h4><h5>PNG</h5><p class=""detail"">例）PNG-8で書き出す場合<br><strong class=""conspicuous"">test.png8</strong><br>例）PNG-24で書き出す場合<br><strong class=""conspicuous"">test.png24</strong></p><h5>JPEG</h5><p class=""detail"">例）画質10%で書き出す場合<br><strong class=""conspicuous"">test.png1</strong>又は<strong class=""conspicuous"">test.png10%</strong><br>例）画質100%で書き出す場合<br><strong class=""conspicuous"">test.png10</strong>又は<strong class=""conspicuous"">test.png100%</strong><br><p class=""detail"">「%」を記入せずとも画質をカスタマイズできますが、<br>他の人が見てわかりやすいように「%」をつけることを推薦します。</p><p class=""detail"">ちなみに、指定なしの場合は「.jpg8」と同様の画質、80%になります。</p><h5>GIF</h5><p class=""detail"">GIFには書き出しオプションがありません</p><h4>4：同じ画像で複製</h4><p>複数の画像を変更するには、「,」でつなぎます。（「,」の後のスペースはなくても大丈夫です）</p><p class=""detail"">例）同じ画像でpngとjpgを書き出す場合<br><strong class=""conspicuous"">test.png, test.jpg</strong></p><h4>5：書き出し先をカスタマイズ</h4><p>書き出す画像名の前に<strong class=""conspicuous"">フォルダ名＋「/」</strong>を記入したらできます。</p><p class=""detail"">例）「テスト」フォルダの中にtest.jpgを書き出す場合<br><strong class=""conspicuous"">テスト/test.jpg</strong></p><h4>6：余白入れて書き出す</h4><p>選択ツールで範囲を指定します。<br>その後レイヤーマスクを追加しすると余白のある画像を書き出す事が可能です。</p><figure><a class=""js_popup_img""><img src=""/images/photoshop/yohaku.jpg"" alt=""""></a></figure><figure><a class=""js_popup_img""><img src=""/images/photoshop/yohaku2.jpg"" alt=""""></a><a class=""js_popup_img"" style=""margin-left: 20px;""><img src=""/images/photoshop/yohaku3.png"" alt=""""></a></figure></section><section id=""material""><h3>画像を一気に変更する方法(一枚の画像で複数のサイズ表記している場合)</h3><p>おいしい牛乳やカッセルの月次更新作業でオススメ。<br>（一枚の画像で以下のように、たくさんのサイズ設定がされている状態）</p><figure><a class=""js_popup_img""><img src=""/images/photoshop/material1.jpg"" alt=""""></a></figure><p>例えば、上記の画像とは違う画像を使用したい場合、読み込んでいる画像名と同じ名前で上書き保存又は、画像の入れ替えをすると一気に変更する事が可能です。</p><h5>注意点</h5><p class=""detail"">※読み込んでいるフォルダ名や格納場所を変えないでください。<br>※上書きする前に、画像がリンクされたアイテムになっていることを確認してください。</p><figure><a class=""js_popup_img""><img src=""/images/photoshop/material2.jpg"" alt="""" style=""max-height: none;""></a></figure><p>差し替え終了！</p><figure><a class=""js_popup_img""><img src=""/images/photoshop/material3.jpg"" alt=""""></a></figure><p>もし変更されていなかった場合、<br><strong class=""conspicuous"">レイヤー＞スマートオブジェクト＞変更された全てのコンテンツ</strong>をするとできます。</p><figure><a class=""js_popup_img""><img src=""/images/photoshop/material4.jpg"" alt="""" style=""max-height: none;""></a></figure></section><section id=""uniformity""><h3>たくさんの画像を一気に横（縦）幅統一する方法</h3><p>エコガラスで事例紹介や、スペシャルインタビューの新規作成するときにオススメ。<br>ちなみにここではPhotoshopを使用せず、iMage Toolsを使用します。<br>(iMage Tools : <a href=""https://pc-karuma.net/mac-app-image-tools-resize/"" target=""_blank"">https://pc-karuma.net/mac-app-image-tools-resize/</a> )</p><figure><a class=""js_popup_img""><img src=""/images/photoshop/uniformity1.jpg"" alt="""" style=""max-height: none;""></a></figure><p>一括で名前の変更、連番で表記することも可能です。</p></section><section id=""trivia""><h3>豆知識（もどき）</h3><p>以下の内容は豆知識というほどではないですが、知っていたら今後は楽になるので、紹介します。</p><ul class=""detail""><li><a href=""#shortcut"">1：ショートカットキーをカスタマイズ</a></li><li><a href=""#script"">2：Scriptを使ってカスタマイズ</a></li><li><a href=""#exchange"">3：Adobe Exchangeで便利な機能を入手しよう！</a></li><li><a href=""#calculation"">4：CC 2019から新しい機能　簡単な数値計算</a></li><li><a href=""#font"">5：画像になってしまったフォントの種類がわかる</a></li><li><a href=""#notEnough"">6：もらった画像のサイズが足りなかった時の苦肉の策</a></li></ul><h4 id=""shortcut"">1：ショートカットキーをカスタマイズ</h4><p class=""detail""><strong class=""conspicuous"">編集＞キーボードショートカット</strong><br>普段使っているものはショートカットキーを設定すると楽です。<br>パネルメニュー、ツール、アプリーケーションを設定す事ができます。<br>定義：⌘（＋Option 、Control、Shift）＋A~Z 又は　F1〜F12、0〜9、tab、esc、矢印キー以外の記号<br>のどれか一つ</p><h4 id=""script"">2：Scriptを使ってカスタマイズ</h4><p>下の画像のようにアンカーリンクなどを作成するときに、横幅がバラバラのものを「配列」や、「等間隔に分布」で均等に横並びする事があります。</p><figure><a class=""js_popup_img""><img src=""/images/photoshop/Script1.jpg"" alt=""""></a></figure><p>しかし、「配列」や、「等間隔に分布」をするには　レイヤー＞分布＞平行　といった感じで、いちいちボタンを探して押す事が大変です。<br>さらに、これらに至ってはショートカットキーを作成できません。<br>そんな時はScriptを使ってカスタマイズしましょう！</p><p class=""detail"">今回の場合は↓こちらのURLでデーターをダウンロードしよう！</p><p class=""detail"">オブジェクトが横に並んでいるときには「Distribute Layer Spacing Horizontal 0-2-0.jsx」、縦に並んでいるときには「Distribute Layer Spacing Vertical 0-2-0.jsx」を使います。</p><p class=""detail""><a href=""http://morris-photographics.com/photoshop/scripts/distribute-horizontally.html""  target=""_blank"">Adobe Photoshop Scripts | Trevor Morris Photographics | Horizontal 0-2-0.jsx</a><br><a href=""http://morris-photographics.com/photoshop/scripts/distribute-vertically.html""  target=""_blank"">Adobe Photoshop Scripts | Trevor Morris Photographics | Vertical 0-2-0.jsx</a></p><h5>Scriptの導入手順</h5><ul class=""detail number""><li>① 欲しいScriptのデータを探す</li><li>② Scriptのデータはjsxで保存する</li><li>③ Finder：Photoshop＞Presets＞Scripts にjsxデータを保存する<br>※jsxのデータ名は自分がわかるように名前を変更することをオススメします。</li></ul><figure><a class=""js_popup_img""><img src=""/images/photoshop/Script2.jpg"" alt="""" style=""max-height: none;""></a></figure><ul class=""detail number""><li>④ Photoshopを一旦終了する</li><li>⑤ メニュー：ファイル＞スクリプト　から実行できます。<br>※スクリプトが表記できたら、ショートカットキーをカスタマイズすると今後使用するときに楽です。</li></ul><figure><a class=""js_popup_img""><img src=""/images/photoshop/Script3.jpg"" alt=""""></a></figure><p class=""reference"">参考：<a href=""http://www.dtp-transit.jp/adobe/photoshop/post_2093.html"" target=""_blank"">http://www.dtp-transit.jp/adobe/photoshop/post_2093.html</a></p><h4 id=""exchange"">3：Adobe Exchangeで便利な機能を入手しよう！</h4><p>Photoshopの拡張機能を充実させてくれるツールです。<br>これはphotoshopだけではなく、Illustratorやaftereffectなどのアドビ製品全般に使用できます。</p><p>リンク ：<a href=""https://www.adobeexchange.com/creativecloud.photoshop.html#pfa"" target=""_blank"">https://www.adobeexchange.com/creativecloud.photoshop.html#pfa</a></p><figure><a class=""js_popup_img""><img src=""/images/photoshop/adobeexchange.jpg"" alt=""""></a></figure><p>有料か無料か、評価が高いなど選択してから調べることも可能です。<br>ちなみに、私は整列系をよく使うので、こちらをダウンロードしてます。<br>ダウンロード先 : <a href=""https://www.adobeexchange.com/creativecloud.details.13665.html"">https://www.adobeexchange.com/creativecloud.details.13665.html</a> </p><h4 id=""calculation"">4：CC 2019から新しい機能　簡単な数値計算</h4><p>横幅はわかってるけど、5等分の横幅計算して、それを長方形ツールにするのめんどくさいな…という時にオススメ！<br>しかし、答えが小数点がある場合（.5以下）は切り捨て計算されます。<br>又、<strong class=""conspicuous"">+（加算）、-（減算）、*（乗算）、/（除算）、%（百分率）</strong>は組み合わせて計算する事はできません。<br>加算だけ、減算だけの計算になります。</p><p>※一応小数点は計算されますが、長方形ツールなどで作成されたものは切り捨て計算された大きさで表示されます。</p><h4 id=""font"">5：画像になってしまったフォントの種類がわかる</h4><p>もらったデータのテキストフォントが自分が持っていない時「〜のフォントとはありません」と表記されますが、画像としてもらったテキストは、ヒントが出ません。</p><p>そんな時は</p><ul class=""detail number""><li>① 画像の中にある検索したい文字を選択ツールで囲む</li><li>② 書式＞マッチフォント</li></ul><figure><a class=""js_popup_img""><img src=""/images/photoshop/font.jpg"" alt=""""></a></figure><p>これだけで、近いフォントを探す事ができます。<br>又、テキストオプションで日本語か欧文かで探す事ができます。（欧文よりも日本語はまだ対応範囲が少ない）</p><h4 id=""font"">6：もらった画像のサイズが足りなかった時の苦肉の策</h4><p>この画像でバナーを作って欲しいと依頼があったりする。<br>しかし、思っていた以上に縦に対して横が足りなくて、もうちょっと横（縦）に大きかったら…と思ったり<br>背景が一色だと思ってたら、若干グラデーションあるし…どうしよう…と思う事があるときにオススメ！<br>そんな時は</p><ul class=""detail number""><li>① 調節（拡大）したい画像を切り抜きツールで調節する</li><li>② 抜きツールを確定する前にメニュー「コンテンツに応じる」をチェックを入れる</li></ul><figure><a class=""js_popup_img""><img src=""/images/photoshop/notEnough1.jpg"" alt=""""></a></figure><p>これだけで、photoshopが勝手にそれっぽく背景を作ってくれます。</p><h5>離れている二人を、簡単に近くする方法</h5><p class=""detail"">上の作業の応用編です。画像によってはできないので、できたら楽できた！ぐらいに思ってください。<br>サイコムの対談のバナーを作る時に便利です。</p><p class=""notEnough""><strong class=""conspicuous"">編集＞コンテンツに応じて拡大・縮小</strong><br>上記の方法だけでできます。</p></section>",12,,post
10,sass/scssの便利な使い方,useful-scss_sass,"<h2>今回紹介する機能</h2>[mokujiCode /common/inc/disclist-scss.php] <!-- 目次 -->&nbsp;<section id=""nest""><h3>入れ子（ネスト）</h3>入れ子にして書くことができるので、記述量が減り、可読性とメンテナンスが向上するメリットがあります。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>a {color: gold;transition: opacity .3s;&amp;:hover {opacity: .7;}}</code></pre>▼CSS<pre><code>a { color: gold; -webkit-transition: opacity .3s; transition: opacity .3s; }a:hover { opacity: .7; }</code></pre><h4 class=""label_headline notice_headline"">注意点</h4><p class=""notice"">※入れ子が深くなりすぎないように注意しましょう。cssのセレクタは右から左に読み込まれます。セレクタが深い階層にあれば、それだけレンダリング時間が増大します。また読みにくくなることで、メンテナンスコストも嵩みます理想は1~3つ。CSSの優先順位を吟味し、多くても4つ以内に収めることを目指しましょう。</p>▼SCSS<pre><code>ul {&gt;li {.text_wrap {p {.text_headline { font-size: 22px; }}}}}</code></pre>▼CSS<pre><code>ul &gt; li .text_wrap p .text_headline { font-size: 22px; }</code></pre></section><!-- ネスト --><!--?php //*変数 ************************************************************************/ ?--><section id=""variable"" class=""js_scroll_show""><h3>変数</h3>同じ値は、変数に格納して、使いまわすことができます。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code><span class=""variable"">$text_color-red</span>: #fc0;a {color: <span class=""variable"">$text_color-red</span>;}.notice_label {color: #fff;background: <span class=""variable"">$text_color-red</span>;}</code></pre>▼CSS<pre><code>a { color: <span class=""variable"">#fc0</span>; }.notice_label { color: #fff; background: <span class=""variable"">#fc0</span>; }</code></pre><h4 class=""label_headline kuhuu_headline"">さらに</h4>変数は{}ネストごとにスコープされます。{}内で上書きされた変数は{}のみで有効です。▼SCSS<pre><code><span class="""">$text_color</span>: #fc0;a {color: <span class="""">$text_color</span>;&amp;.nolink {<span class=""variable"">$text_color</span>: #ddd;color: <span class=""variable"">$text_color</span>;}}.notice_label {color: #fff;background: <span class="""">$text_color</span>;}</code></pre>▼CSS<pre><code>a { color: #fc0; }a.nolink { color: <span class=""variable"">#ddd</span>; }.notice_label { color: #fff; background: #fc0; }</code></pre>セレクター名やプロパティ名にも使えます。#{XXX}といった書き方(インターポレーション[補間])でも使えます。▼SCSS<pre><code><span class=""variable"">$imgPath</span>: ""/common/images"";<span class=""variable"">$className</span>: balloon;<span class=""variable"">$direction</span>: left;a.<span class=""variable"">#{$className}</span> {padding-<span class=""variable"">#{$direction}</span>: 2em;background: url(<span class=""variable"">#{$imgPath}</span>/arrow-bgi.png); }</code></pre>▼CSS<pre><code>a.<span class=""variable"">balloon</span> { padding-<span class=""variable"">left</span>: 2em; background: url(<span class=""variable"">/common/images</span>/arrow-bgi.png);}</code></pre><h4 class=""label_headline other_headline"">その他</h4>使い道は限られるかもしれませんが、!global フラグや!default フラグでスコープを調整したり、type-of関数で”型”を呼び出し、if文(@if)を使うといった技もあります。のちに説明しますが、"" , ""で区切り、配列を作成できたりします。CSSネイティブ変数についてはコンパイル後もそのまま書き出されます。</section><!-- 変数 -->&nbsp;<section id=""calculation""><h3>計算</h3>四則演算が使えます。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>$siteWidth:1200px;$spaceWidth:20;.panel_list_wrap {// 足し算width: $siteWidth + 20px;}.panel_list {// 引き算padding: 0 $siteWidth - 1180px;li { // 掛け算margin: 0 $spaceWidth*2px;// 割り算width: $siteWidth/3;}}.panel_space {// 余りpadding: $spaceWidth%3%;}</code></pre>▼CSS<pre><code>.panel_list_wrap { width: 1220px; }//1200px + 20px;.panel_list { padding: 0 20px; }//1200px - 1180px;.panel_list li { margin: 0 40px;//20 *2px;width: 400px;// 1200px /3}.panel_space { padding: 2%;//20 ÷ 3 の余り *1% }</code></pre><h4 class=""label_headline kuhuu_headline"">さらに</h4>文字列の連結も可能です。▼SCSS<pre><code><span class=""variable"">$name</span>: ""佐藤さん"";<span class=""variable"">$name2</span>: ""鈴木さん"";a {&amp;:after {content: <span class=""variable"">$name</span>+""と""+<span class=""variable"">$name2</span>+""が来ます"";}}</code></pre>▼CSS<pre><code>a:after { content: ""佐藤さんと鈴木さんが来ます""; }</code></pre></section><!-- 計算 -->&nbsp;<section id=""mixin""><h3>@mixin</h3>色々まとめて定義して、使いまわせます。引数も使ってさらに柔軟な操作ができます。@mixin(){};で定義し、@include();で呼び出します。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>@mixin blueBorder() {border: solid 2px blue;}.text {@include blueBorder();}.box_text {@include blueBorder();}</code></pre>▼CSS<pre><code>.text { border: solid 2px blue; }.box_text { border: solid 2px blue; }</code></pre><h4 class=""label_headline kuhuu_headline"">さらに</h4>引数を使った例です。初期値を設定しておくことも可能です。▼SCSS<pre><code>@mixin blueBorder(<span class=""variable"">$style</span>: solid, <span class=""variable"">$borderWidth</span>: 4px; ) {border: <span class=""variable"">$style</span> <span class=""variable"">$borderWidth</span> blue;}.default {@include blueBorder();}.wide_box {@include blueBorder(<span class=""variable"">double</span>,<span class=""variable"">10px</span>);}.dot_box {@include blueBorder(<span class=""variable"">dotted</span>,<span class=""variable"">6px</span>);}</code></pre>▼CSS<pre><code>.default { border: solid 4px blue; }.wide_box { border: <span class=""variable"">double</span> <span class=""variable"">10px</span> blue; }.dot_box { border: <span class=""variable"">dotted</span> <span class=""variable"">2px</span> blue; }</code></pre><div class=""default"">default</div><hr /><div class=""wide_box"">wide_box</div><hr /><div class=""dot_box"">dot_box</div><hr /><h4 class=""label_headline other_headline"">その他</h4>@mixinの{ }内に@content;と記述するとコンテントブロックを渡すこともできます。が、ここでの説明は割愛いたします。気になる方は「mixin content」と検索して見てください。</section><!-- mixin -->&nbsp;<section id=""extend""><h3>@extend</h3>スタイルの定義を継承することができます。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>.headline3 {margin-bottom: .5em; padding-left: .5em;border-left: solid .25em gray;font-size: 22px;}.headline3_red {@extend .headline3;border-left-color: red;color: red;}.headline3_red_modified {@extend .headline3_red;transform: rotate3d(1, 1, 1, 45deg);}</code></pre>▼CSS<pre><code>.headline3, .headline3_red, .headline3_red_modified { margin-bottom: .5em; padding-left: .5em; border-left: solid .25em gray; font-size: 22px;}.headline3_red, .headline3_red_modified { border-left-color: red; color: red; }.headline3_red_modified { transform: rotate3d(1, 1, 1, 45deg); }</code></pre><h4 class=""label_headline kuhuu_headline"">さらに</h4>頭に%を指定し、コンパイルした際にCSSに出力されないextend専用のstyleを用意しておくことができます。※プレースホルダーセレクタ<pre><code>%default-box-style {margin: 10px;padding: 10px;border: solid 1px gold;}.boxA {@extend %default-box-style;background: green;}</code></pre>▼CSS<pre><code>//boxAしか書き出されない。.boxA { margin: 10px; padding: 10px; border: solid 1px gold; }.boxA { background: green; }</code></pre><h4 class=""label_headline other_headline"">その他</h4>@extendは、乱用すると、セレクタの数が膨大になり、書き出されたcssを持って、内容を判断することが難しくなります。また、継承元と継承先のセレクタがまとまって書き出されるため、優先度がSCSSで記述したものと変わってくることもあり得ます。コンポーネント内のみの使用など、ある程度範囲を絞り、使用することが望ましいとされます。</section><!-- extend -->&nbsp;<section id=""function""><h3>関数</h3>関数を使うことができます。関数には、自作関数の他、あらかじめ用意されたネイティブ関数(組み込み関数)もあります。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>//▼引数を2で割った値を返す。@function half_width($value) {@return round($value / 2);}$contentWidth: 1000px;.half_width-item { width: half_width($contentWidth); }//▼引数複数の場合@function px($size,$width:640){$rate: $size / 640*(640/$width);@return $rate * 100 * 1%;}.px_sample { width: px(200); } .px_sample-w600 { width: px(200,600); }//親要素のwidthが600pxの時//▼mixinと併せて使う$viewport:640;@function get_vw($size, $viewport:640){  $rate: 100 / $viewport;  @return $rate * $size * 1vw;}@mixin fz_vw($font_size:10){  font-size: $font_size * 1px*$viewport/640;  font-size: $font_size / 10 * 1rem*$viewport/640;  font-size: get_vw($font_size)*$viewport/640;}</code></pre>▼CSS<pre><code>//▼引数を2で割った値を返す。.half_width-item { width: 500px; }//▼引数複数の場合.px_sample { width: 31.25%; }.px_sample-w600 { width: 33.3333333333%; }//▼mixinと併せて使う.px_sample { font-size: 20px; font-size: 2rem; font-size: 3.125vw; }</code></pre><div class=""w640Wrap""><div class=""px_sample"">width: 31.25%幅200px/640px</div></div><hr /><div class=""w600Wrap""><div class=""w600_no_px_sample"">width: 33.3333333333%幅200px/600px</div></div><h4 class=""label_headline kuhuu_headline"">さらに</h4>SCSSにも、元から用意されている関数があります。これを使用して、色の彩度を調整したり、四捨五入したり、文字数を返したり、配列を操作したり、色々できます。ここには書ききれないので、いくつか例をあげ、またどこかで紹介できたらと思います。▼SCSS<pre><code>//▼rgba をHEXだけではなく、rgbやhsl、カラーネームを使ってそのままかける.sample {color: rgba(#0086af, 0.5);}//▼中間色の色を返します。.sample-mix {color: mix(#0086af, #00c, 50%);}//▼四捨五入.sample-round {$a-width:100/3;$b-height:100*3.14%/2.2;width: $a-width*1px;height: $b-height;width: round($a-width)*1px;height: round($b-height);}//▼絶対値.sample-abs {width: abs(100px);height: abs(-100px);}.sample-abs { width: 100px; height: 100px; }</code></pre>▼CSS<pre><code>//▼rgba.sample { color: rgba(0, 134, 175, 0.5); }//▼中間色.sample-mix { color: #0043be; }//▼四捨五入.sample-round { width: 33.3333333333px; height: 142.727272727%; width: 33px; height: 143%; }//▼絶対値.sample-abs { width: 100px; height: 100px; }</code></pre></section><!-- 関数 -->&nbsp;<section id=""color""><h3>色の調整</h3>先ほどの関数でも少し触れましたが、SCSSでは、色を調整できる関数が用意されています。そのいくつかを紹介します。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>//色の変数を宣言$color:#0086af;//▼rgba をHEXだけではなく、rgbやhsl、カラーネームを使ってそのままかける.rgba {color: rgba($color, 0.5);}//▼中間色の色を返します。.mix {color: mix($color, #00c, 50%);}//▼輝度を明るくする。.lighten {color: lighten($color, 30%);}//▼輝度を暗くする。.darken {color: darken($color, 20%);}//▼彩度を上げる。.saturate {color: saturate($color, 20%);}//▼彩度を下げる。.desaturate {color: desaturate($color, 20%);}//▼グレースケールに変換。.grayscale {color: grayscale($color);}//▼補色。.complement {color: complement($color);}//▼色の反転。.invert {color: invert($color);}//▼色相環の調整。.adjust-hue {color: #{hue($color)}; //hue(色相)の値を出力color: adjust-hue($color, -60deg); //色相環の値を指定し、色を変換}//▼色の諸々調整。.adjust-color {color: adjust-color($color, $red: 45, $blue: -120);}</code></pre>▼CSS<pre><code>//▼rgba.rgba { background: rgba(0, 134, 175, 0.5); }//▼中間色.mix { background: #0043be; }//▼輝度を明るくする。.lighten { background: #49d4ff; }//▼輝度を暗くする。.darken { background: #001116; }//▼彩度を上げる。.saturate { background: #0086af; }//▼彩度を下げる。.desaturate { background: #003849; }//▼グレースケールに変換。.grayscale { background: #575858; }//▼補色。.complement { background: #af2900; }//▼色の反転。.invert { background: #ff7950; }//▼色相環の調整。.adjust-hue { background: 194.057142857deg; background: #00af29; }//▼色の諸々調整。.adjust-color { background: #2d8637; }</code></pre><ul class=""colorbox""> <li class=""default_color"">default</li> <li class=""rgba"">rgba</li> <li class=""mix"">mix</li> <li class=""lighten"">lighten</li> <li class=""darken"">darken</li> <li class=""saturate"">saturate</li> <li class=""desaturate"">desaturate</li> <li class=""grayscale"">grayscale</li> <li class=""complement"">complement</li> <li class=""invert"">invert</li> <li class=""adjust-hue"">adjust-hue</li> <li class=""adjust-color"">adjust-color</li></ul></section><!-- 色の調整 -->&nbsp;<section id=""repeat""><h3>繰り返し</h3>for・while・eachなどの、繰り返し構文が、SCSSでも使えます。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>//▼for@for $i from 1 through 3 {.for-through-#{$i} { width: 2em * $i; }}@for $i from 1 to 3 {.for-to-#{$i} { width: 2em * $i; }}//▼while$i: 1;@while $i &lt;= 3 { .while-nobori-#{$i} { width: 2em * $i; } $i: $i + 1; } $i: 6; @while $i &gt; 0 {.while-kudari-#{$i} { width: 2em * $i; }$i: $i - 2;}//▼each$colors : red, green, blue;@each $array in $colors {.#{$array}{color : $array;}}</code></pre>▼CSS<pre><code>//▼for.for-through-1 { width: 2em; }.for-through-2 { width: 4em; }.for-through-3 { width: 6em; }.for-to-1 { width: 2em; }.for-to-2 { width: 4em; }//▼while.while-nobori-1 { width: 2em; }.while-nobori-2 { width: 4em; }.while-nobori-3 { width: 6em; }.while-kudari-6 { width: 12em; }.while-kudari-4 { width: 8em; }.while-kudari-2 { width: 4em; }//▼each.red { color: red; }.green { color: green; }.blue { color: blue; }</code></pre><h4 class=""label_headline kuhuu_headline"">実例</h4>▼SCSS<pre><code>//▼backgroundとnth-childli.bg-for { $count:5; //繰り返す数@for $i from 1 through $count { &amp;:nth-child(#{$i}) a {background: url(/icon-#{$i}.png);}}}//▼z-indexli.z-index {$i: 1;$count: 7; //リストの数@while $i &lt;= $count {  &amp;:nth-child(#{$i}) {  z-index: 801 - $i;  } $i: $i + 1; }  }//▼letter-spacing$lsSize: (0, 25, 50, 75, 100);//▼上記配列で並べた分のclass=""fxx""が出力。.f20 { font-size: 20px; font-size: 2rem; }。@each $icon in $lsSize {.ls#{$icon} {letter-spacing: $icon*.001em;}}//▼bootstrap？$btn-sizes: (  sm: 20px,  md: 30px,  lg: 40px);@each $modifier, $size in $btn-sizes {  .btn--#{$modifier} {    width: $size;    height: $size;  }}</code></pre>▼CSS<pre><code>//▼backgroundとnth-childli.bg-for:nth-child(1) a { background: url(/icon-1.png); }li.bg-for:nth-child(2) a { background: url(/icon-2.png); }li.bg-for:nth-child(3) a { background: url(/icon-3.png); }li.bg-for:nth-child(4) a { background: url(/icon-4.png); }li.bg-for:nth-child(5) a { background: url(/icon-5.png); }//▼z-indexli.z-index:nth-child(1) { z-index: 800; }li.z-index:nth-child(2) { z-index: 799; }li.z-index:nth-child(3) { z-index: 798; }li.z-index:nth-child(4) { z-index: 797; }li.z-index:nth-child(5) { z-index: 796; }li.z-index:nth-child(6) { z-index: 795; }li.z-index:nth-child(7) { z-index: 794; }//▼letter-spacing.ls0 { letter-spacing: 0em; }.ls25 { letter-spacing: 0.025em; }.ls50 { letter-spacing: 0.05em; }.ls75 { letter-spacing: 0.075em; }.ls100 { letter-spacing: 0.1em; }//▼bootstrap？.btn--sm { width: 20px; height: 20px; }.btn--md { width: 30px; height: 30px; }.btn--lg { width: 40px; height: 40px; }</code></pre><h4 class=""label_headline other_headline"">その他</h4>配列には、Map型（連想配列）、nth関数などの機能もあるので、調べて見ましょう。</section><!-- 関数 -->&nbsp;<section id=""if""><h3>条件分岐</h3>if文も使えます。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>$signal: susume;.signal_color {  @if $signal == susume { //もし変数が""進め""なら    color: green;  } @else if $type == tomare { //もし変数が""止まれ""なら    color: red;  } @else if $type == chuui { //もし変数が""注意""なら    color: yellow;  } @else { //もし上記いずれでもないなら    color: black;  }}</code></pre>▼CSS<pre><code>.signal_color { color: green; }</code></pre><h4 class=""label_headline kuhuu_headline"">実例</h4>▼SCSS<pre><code>//▼bootstrap4では、こんな風に使ってます。@mixin gradient-bg($color,$enable-gradients) {@if $enable-gradients {background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x;} @else {background-color: $color;}}$body-bg:#fff;.bg-gradient {@include gradient-bg($color:#fc0,$enable-gradients:true);}.bg-no_gradient {@include gradient-bg($color:#fc0,$enable-gradients:false);}//▼色々組み合わせたパターン$columns:1;@each $breakpoint in sm, md, lg {@if $breakpoint == sm {$columns: 2;} @else if $breakpoint == md {$columns: 3;} @else {$columns: 4;}@for $i from 1 through $columns {.col-#{$breakpoint}-#{$i} {width: percentage($i / $columns);}}}</code></pre>▼CSS<pre><code>//▼bootstrap.bg-gradient { background: #fc0 -webkit-gradient(linear, left top, left bottom, from(#ffd426), to(#fc0)) repeat-x; background: #fc0 linear-gradient(180deg, #ffd426, #fc0) repeat-x; }.bg-no_gradient { background-color: #fc0; }//▼組み合わせ.col-sm-1 { width: 50%; }.col-sm-2 { width: 100%; }.col-md-1 { width: 33.3333333333%; }.col-md-2 { width: 66.6666666667%; }.col-md-3 { width: 100%; }.col-lg-1 { width: 25%; }.col-lg-2 { width: 50%; }.col-lg-3 { width: 75%; }.col-lg-4 { width: 100%; }</code></pre></section><!-- 条件分岐 -->&nbsp;<section id=""import""><h3>@import</h3>@import ""〇〇""; といった記述で、外部のscssを読み込み、一枚のcssとしてコンパイルすることが可能です。その際に前に読み込まれた@mixinや@functionなどを読み込み先で使用することも可能です。相対パスであちこちのscssをimportすることが可能です。<h4 class=""label_headline sample_headline"">記述例</h4>▼SCSS<pre><code>▼こういったディレクトリ構造として、common│├── css│└── style.css│├── other│└── _style3.scss└── scss├── _mixin.scss├── matome│├── _style1.scss│└── _style2.scss├── style.scss        基本的な書き方は、@import ""〇〇"";ですが、@import ""_mixin.scss"";_（アンダースコア）と.scss（拡張子）は省略できます。@import ""mixin"";相対パスを使って書くことも可能です。@import ""matome/style1"";@import ""../../common/scss/matome/style2"";@import ""../other/style3"";    </code></pre><h4 class=""label_headline other_headline"">その他</h4>※モジュールとしてインポートして使う Sass ファイルは、単独で CSS にコンパイルされないよう先頭に_（アンダースコア）をつける慣わしがあります。例：_mediaquery.scss</section><!-- @import -->",2,,post
6,"scss/sass コンパイル方法",compile-scss_sass,"<h2>今回紹介する機能</h2><br>[mokujiCode /common/inc/disclist-scss-compile.php] <!-- 目次 --><section><h3>概要</h3><p>scssをコンパイルするには、各種コンパイルツール(Codekit)を使うか、PCに環境を用意してコンパイルするかです。</p><p>元々sassは、Rubyで書かれていました。Rubyの実行環境を構築して、Sass＋Compassを使用するのが主流でしたが、Compassは現在開発終了し、より早い、libsassというC/C++で書かれたsassのポートが現れたため、現在はlibsassでコンパイルすることが主流となっております。※一説では、約1000倍速いとのこと。</p><p>今回はlibsassを使用したコンパイル方法を、いくつか紹介いたします。</p></section><section id=""Codekit""><h2>Codekit等のソフトを使用した方法</h2><p>Codekit等のソフト(GUIコンパイラ)を使って入れたらすぐコンパイルしてくれるものをいくつか紹介します。これらのものは有料のもの、登録が必要なものと、使用前に色々制約がつきますが、一度入れたら特別な設定も必要なくすぐに使えます。簡単な設定で高機能な処理ができるため、黒い画面が苦手な方にオススメです。</p><hr><h4>Codekit</h4><p>お馴染みのMacの高機能GUIコンパイラ。有料ですが、様々な設定ができて、liveReloadや、Autoprefixer,Babel,build機能や.kitを使った制作等、コンパイル以外にも多数の便利機能を備えています。</p><p>料金：34$(20180728現在)</p><a href=""https://codekitapp.com/"" target=""_blank"">https://codekitapp.com/</a><hr><h4>prepros</h4><p>こちらはWindowsで使える数少ない高機能GUIコンパイラ。有料っぽく見えますが、登録のみで、無料でも使えるそうです。でも「買ってくれ」ってポップアップがよくでるそうなので、30$前後なので買ってもいいくらいの高機能だそうです。</p><p>料金：29$(20180728現在) ※無料でも使用可</p><a href=""https://prepros.io/"" target=""_blank"">https://prepros.io/</a><hr><h4 class=""js_scroll_show"">Koala</h4><p>こちらも、Win,Mac,Linuxなどマルチプラットフォーム動くGUIのコンパイラです。こちらは無料で使えますが、寄付してくださいとお願いされています。</p><p>料金：無料(20180728現在)</p><a href=""http://koala-app.com/"" target=""_blank"">http://koala-app.com/</a><hr></section><style>code {background: #ededed; margin-top: .5em; padding: .5em 1em; border-radius: 4px; display: block;}</style><section id=""gulp""><h3>Gulp等タスクランナーやフレームワークを使用した方法</h3><p>GulpやGruntのタスクランナー、Webpack、Rollup、Parcelなどの便利ツール。<br>これらを使用する場合は最初にも途中にも、色々と設定が必要ですが、細かい設定ができたり、GUIコンパイラでは実現できない自由なコンパイル設定が可能です。<br>また、laravelやcakephpなどをPHPフレームワークもscssをコンパイルしてくれる機能を使うことができます。<br>ここでは一例として、gulpを使った方法を紹介します。</p><h4>Gulpを導入して、SCSSを保存したら、CSSが書き出されるところまで</h4><hr><h5>1. Node.jsをインストール</h5><p><a href=""https://nodejs.org/ja/"" target=""_blank"">公式サイトよりNode.js</a>のインストーラーの「最新版<sup>※</sup>」をダウンロードします。※npxという便利コマンドが使えるため</p><hr><h5>2. コマンドラインを起動し、scssが保管されているフォルダに移動し、package.jsonファイルを作成する</h5><p>↓移動する<br><code>cd /Users/★★★/sasstest</code></p><p>↓package.jsonファイルを作成する<br><code>npm init -y</code></p><hr><h5>3. Gulpのインストール</h5><p>↓Gulp本体をローカル環境に（プロジェクトフォルダー以下で使えるように）インストール<br><code>npm install -D gulp</code><small>※""-D""は""––save-dev""の省略形</small><small>※最近のフロントエンド界隈ではグローバルにはGulpをインストールしないそうです。</small></p><hr><h5>4. Gulpに、Sassファイルをコンパイルする為のプラグインgulp-sassをインストールします。</h5><p><code>npm install -D gulp gulp-sass</code></p><hr><h5>5. gulpfile.jsファイルを作成して、実行する。</h5><p>Gulpの入っているフォルダに、gulpfile.jsというファイルを作成して、色々と設定を書き込んでいきます</p><pre>// gulpプラグインの読み込みconst gulp = require('gulp');// Sassをコンパイルするプラグインの読み込みconst sass = require('gulp-sass');// style.scssをタスクを作成するgulp.task('default', function () {// style.scssファイルを取得gulp.src('scss/style.scss')// Sassのコンパイルを実行      .pipe(sass({        outputStyle: 'compact' //outputstyleは、ここで設定します。      })// cssフォルダー以下に保存.pipe(gulp.dest('css'));});</pre><p>↓ターミナルに戻ってコマンドをうってgulpを実行します。<br><code>npx gulp</code></p><p>以上でcssが書き出されますが、できたら、保存したら、書き出されるように設定したいので、設定ファイルをいじります。gulp.watch('監視するファイル', 処理)というものを使います。</p><hr><h5>6. gulp.watchを使おう</h5><p><pre>// gulpプラグインの読み込みconst gulp = require('gulp');// Sassをコンパイルするプラグインの読み込みconst sass = require('gulp-sass');// style.scssの監視タスクを作成するgulp.task('default', function () {// ★ style.scssファイルを監視gulp.watch('scss/style.scss', function () {// style.scssの更新があった場合の処理// style.scssファイルを取得gulp.src('scss/style.scss')// Sassのコンパイルを実行.pipe(sass({outputStyle: 'compact'})// Sassのコンパイルエラーを表示// (これがないと自動的に止まってしまう).on('error', sass.logError))// cssフォルダー以下に保存.pipe(gulp.dest('css'));});});</pre></p><p>↓ターミナルに戻ってコマンドをうってgulpを実行すると監視が開始されます。<br><code>npx gulp</code></p><p>以上でcssを保存したら、SCSSが書き出されるようになります。</p><p>▼参考サイト</p><a href=""https://ics.media/entry/3290"" target=""_blank"">https://ics.media/entry/3290</a><br><br><hr><h4>npmだけでSassをコンパイルする方法</h4><p>ただコンパイルできたらいいって場合はnpmで数行書いて実現できます。</p><hr><h5>1. 作業用フォルダにて、npm init -y を実行し、package.jsonを作成します。</h5><p><code>npm init -y</code></p><hr><h5>2. sassのコンパイルに必要なツール node-sass と、ファイルの更新管理に使用するツール nodemon をnpmでインストールします。</h5><p><code>npm install -D node-sass nodemon</code></p><hr><h5>3. ""scssの格納場所""と""cssの書き出し場所""と""outputStyle""と""自動監視するか否か""を指定するコマンドをうつ</h5><p><code>node-sass <span style=""color: red"">scss/test.scss</span> <span style=""color: green"">css/test.css</span> <span style=""color: blue"">--output-style compact</span>  -w</code></p><p><span style=""color: red"">赤</span>→""scssの格納場所""。<span style=""color: green"">緑</span>→""cssの書き出し場所""。<span style=""color: blue"">青</span>→""outputStyle""の設定。""-w""→ファイルを更新したら自動コンパイルする場合は-wか--watchを付ける。</p><p>上記が一番手軽なscssのコンパイル方法かもしれない。package.json内に記入して、コマンドを打って監視を行うことも可能です。</p><hr><h5>4. package.json内の、scriptsの部分に、sassコンパイル用のscript, 監視用のscriptを記述し、npmを実行します。</h5><p><code>""build-css"": ""node-sass --include-path scss <b style=""color: purple"">scss/style.scss</b> <b style=""color: purple"">css/style.css</b>"",<br>""watch-css"": ""nodemon -e scss -x ""npm run build-css""""""""</code></p><p>↓npmを実行<code>npm run build-css<br></code></p><p>※↓監視するなら、<code>npm run watch-css</code></p><hr><p>▼参考サイト</p><a href=""""https://qiita.com/setouchi/items/2f7ae68764abe74934fb"""" target=""""_blank"""">https://qiita.com/setouchi/items/2f7ae68764abe74934fb</a><a href=""""https://qiita.com/masamichiueta/items/0074f002d8f1663577a2"""" target=""""_blank"""">https://qiita.com/masamichiueta/items/0074f002d8f1663577a2</a></section><section id=""""atom""""><h3>ATOM等エディターを使った方法</h3><p>テキストエディタにプラグインを入れて、scssをコンパイルする方法もあります。一番手っ取り早いのはこの方法かもしれません。<br>主なエディタとして、coda2や、Sublime Text、Atomが挙げられますが、Vim、Visual Studio Code、Dreamweaver、Brackets、WebStormなどといったエディタでも可能です。<br>エディタによっては、書き出し場所が設定できなかったり、compassしか使えなかったりするので、しっかり制作する際には、別途コンパイルツールを使うか、タスクランナーを使う方がオススメかもしれません。<br>今回は、Atomでのコンパイル方法を紹介します。Atomは、LibSass(高速コンパイル)を使用していて、基本的な設定は変更可能なためオススメです。</p><hr><h5>1. Node.jsをインストール</h5><p><a href=""""https://nodejs.org/ja/"""" target=""""_blank"""">公式サイトよりNode.js</a>のインストーラーをダウンロードし、インストールします。</p><hr><h5>2. node-sassのインストール</h5><p>↓ターミナルで以下のコマンドを入力して、node-sassをインストールします。<code>npm install -g node-sass</code></p><hr><h5>3. sass-autocompileをインストールする</h5><p>Atomを起動して設定画面に進み（Atom > 環境設定）、インストールボタンをクリックすると、パッケージのインストールという画面に進むので、検索ボタンに「sass-autocompile」と入力すると、上位に出てくるので、インストールします。</p><p><img src=""""/wp-content/themes/study/images/atom.png"""" alt="""""""" style=""""width: 100%; height: auto;""""></p><hr><h5>4. 設定を変える</h5><p>インストールできた時点で、使用可能ですが、保存したらコンパイルするようにしたり、書き出し場所を変えたり、コンパイル後のスタイルを設定して実用に耐えるものにします。</p><p>Atomを起動して設定画面に進み（Atom > 環境設定）、パッケージボタンをクリックして、一覧から「sass-autocompile」を見つけだして、「設定」をクリックします。</p><p><img src=""""/wp-content/themes/study/images/atom-pkg.png"""" alt="""""""" style=""""width: 100%; height: auto;""""></p><p><img src=""""/wp-content/themes/study/images/atom-setting.png"""" alt="""""""" style=""""width: 100%; height: auto;""""></p><p>最低限変えたいのが、Compile on Saveにチェックを入れるのと、Compile with 'XX' output style の 下部のFilename pattern for 'XX' compiled files という箇所です。<br>ここの入力欄にて、書き出し場所と、書き出しファイル名を変更できます。</p><h5>5. コンパイルしてみる</h5><p>後は、プロジェクトファイルを作って、scssファイルを作って、何かしら書いて、保存してみて、指定した箇所にcssが書き出されて入れば完了です。</p><p>▼参考サイト</p><a href=""""http://weblifetimes.com/atom-sassautocompile/"""" target=""""_blank"""">http://weblifetimes.com/atom-sassautocompile/</a><a href=""""http://mikawatan.hatenablog.com/entry/2016/10/05/142804"""" target=""""_blank"""">http://mikawatan.hatenablog.com/entry/2016/10/05/142804</a><a href=""""https://dskd.jp/archives/90.html"""" target=""""_blank"""">https://dskd.jp/archives/90.html</a></section><section  id=""""reference"""" style=""""margin-top:2em;""""><h3>参考サイト一覧</h3>https://ics.media/entry/3290https://qiita.com/setouchi/items/2f7ae68764abe74934fbhttps://qiita.com/masamichiueta/items/0074f002d8f1663577a2http://weblifetimes.com/atom-sassautocompile/http://mikawatan.hatenablog.com/entry/2016/10/05/142804https://dskd.jp/archives/90.html</section>""",2,,post
